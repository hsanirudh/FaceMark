generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String       @unique
    emailVerified DateTime?
    image         String?
    role          Role         @default(USER)
    accounts      Account[]
    sessions      Session[]
    attendances   Attendance[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Person {
    id          String             @id @default(cuid())
    name        String             @unique
    imagePaths  String[]
    attendances AttendanceRecord[]
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
}

model Attendance {
    id                String             @id @default(cuid())
    userId            String
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    imagePath         String
    totalDetected     Int
    attendanceRecords AttendanceRecord[]
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
}

model AttendanceRecord {
    id           String     @id @default(cuid())
    attendanceId String
    personId     String
    confidence   Float
    faceId       Int?
    bbox         String?
    attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
    person       Person     @relation(fields: [personId], references: [id], onDelete: Cascade)
    createdAt    DateTime   @default(now())

    @@unique([attendanceId, personId])
}

enum Role {
    USER
    ADMIN
}
